AWSTemplateFormatVersion: "2010-09-09"
Description: (SOxxxx) - The AWS CloudFormation template for deployment of the nlp.js solution. Version v1.0.

Mappings:
    SourceCode:
        General:
            S3Bucket: "dixonaws-solutions"
            KeyPrefix: "nlpjs/v1.0"

Resources:
# --- Lambda functions and related IAM policies

  serverLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "nlp.js serverless Lambda function"
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "nlpjs-serverless.zip"]]
      Handler: _lalalambda/server.handler
      Role:
        Fn::GetAtt: [ nlpjsLambdaExecutionRole , "Arn" ]
      Runtime: nodejs12.x
      Timeout: 6
      MemorySize: 1024
              #Environment:
               #   Variables:
                #      MKT_TBL: !Ref AdTrackingTable
                 #     NOTIFICATION_SERVICE: !Ref NotificationServiceFunction
                  #    POI_TBL: !Ref MarketingPoiTable

  nlpjsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: nlpjsLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt agentsTable.Arn
                  - !GetAtt domainsTable.Arn
                  - !GetAtt entitysTable.Arn
                  - !GetAtt intentsTable.Arn
                  - !GetAtt scenariosTable.Arn
                  - !GetAtt sessionsTable.Arn
                  - !GetAtt settingsTable.Arn
                  - !GetAtt trainingsTable.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:*"


# --- S3 resources

  TrainingAppBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - "*"
            AllowedMethods:
              - POST
              - GET
              - PUT
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      #BucketName: !Join ["", ["nlpjs-training-app-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]

# --- Cloudfront resources

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for nlp.js training app hosting bucket'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: nlp-training-app-bucket-9april2020-2
          ViewerProtocolPolicy: redirect-to-https
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Join ['', [!Ref TrainingAppBucket, '.s3.amazonaws.com']]
            Id: nlp-training-app-bucket-9april2020-2
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: PriceClass_All

# --- S3 resources

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TrainingAppBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', !Ref TrainingAppBucket, '/*']]
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

# --- DynamoDB resources

  agentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: agents
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  domainsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: domains
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  entitysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: entitys
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  intentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: intents
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  scenariosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scenarios
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  sessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sessions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  settingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: settings
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  trainingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: trainings
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

