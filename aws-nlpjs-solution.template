AWSTemplateFormatVersion: "2010-09-09"
Description: (SOxxxx) - The AWS CloudFormation template for deployment of the nlp.js solution. Version v1.0.

Mappings:
    SourceCode:
        General:
            S3Bucket: "dixonaws-solutions"
            KeyPrefix: "nlpjs/v1.0"

Resources:
# --- Lambda functions and related IAM policies

  ServerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "nlp.js serverless Lambda function"
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "nlpjs-serverless.zip"]]
      Handler: _lalalambda/server.handler
      Role:
        Fn::GetAtt: [ nlpjsLambdaExecutionRole , "Arn" ]
      Runtime: nodejs12.x
      Timeout: 6
      MemorySize: 1024

  nlpjsLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: nlpjsLambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource:
                  - !GetAtt agentsTable.Arn
                  - !GetAtt domainsTable.Arn
                  - !GetAtt entitysTable.Arn
                  - !GetAtt intentsTable.Arn
                  - !GetAtt scenariosTable.Arn
                  - !GetAtt sessionsTable.Arn
                  - !GetAtt settingsTable.Arn
                  - !GetAtt trainingsTable.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:*"

  InvokeDeployTrainingApp:
    Type: Custom::InvokeDeployTrainingApp
    DependsOn: TrainingAppBucket
    DeletionPolicy: Delete
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      SrcBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
      SrcPath: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      TrainingAppPackage: nlpjs-trainingapp.zip
      NewBaseApiPath: !Join ["", ["https://", Ref: ApiGatewayRestApi, ".execute-api.", Ref: "AWS::Region", ".amazonaws.com/dev/api"]]
      DestBucket: !Ref TrainingAppBucket

  CustomResource:
    DependsOn: TrainingAppBucket
    Type: AWS::Lambda::Function
    Properties:
      Description: CFN Lambda backed custom resource to deploy assets to s3
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaCustomRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "lambda_function.zip"]]
      Runtime:  python3.7
      Timeout: 120
      Tags:
        - Key: SolutionId
          Value: Sxxxxx

  LambdaCustomRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-custom-resource-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub ${TrainingAppBucket.Arn}/*
              -
                Effect: Allow
                Action:
                  - s3:PutBucketNotification
                Resource:
                  - !Sub ${TrainingAppBucket.Arn}
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region","/*"]]
              -
                Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: !Ref AWS::StackId
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "/* required to get/put objects to Amazon S3"


# --- API Gateway resources

  ApiGatewayRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: dev-nlpjs-serverless
        EndpointConfiguration:
          Types:
            - EDGE
        Policy: ''
  ApiGatewayResourceProxyVar:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodProxyVarAny:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceProxyVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - ServerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayMethodAny:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - ServerLambdaFunction
              - Arn
            - /invocations
      MethodResponses: []
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: dev
    DependsOn:
      - ApiGatewayMethodProxyVarAny
      - ApiGatewayMethodAny
  ServerLambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - ServerLambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*

# --- S3 resources

  TrainingAppBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - "*"
            AllowedMethods:
              - POST
              - GET
              - PUT
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      #BucketName: !Join ["", ["nlpjs-training-app-", Ref: "AWS::Region", "-", Ref: "AWS::AccountId"]]

# --- Cloudfront resources

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for nlp.js training app hosting bucket'

  CloudFrontDistribution:
    DependsOn: InvokeDeployTrainingApp
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Ref TrainingAppBucket
          ViewerProtocolPolicy: redirect-to-https
          CachedMethods:
            - GET
            - HEAD
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - DELETE
            - PATCH
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Join ['', [!Ref TrainingAppBucket, '.s3.amazonaws.com']]
            Id: !Ref TrainingAppBucket
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: PriceClass_All

# --- S3 resources

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TrainingAppBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join ['', ['arn:aws:s3:::', !Ref TrainingAppBucket, '/*']]
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

# --- DynamoDB resources

  agentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: agents
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  domainsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: domains
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  entitysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: entitys
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  intentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: intents
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  scenariosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: scenarios
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  sessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sessions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  settingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: settings
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  trainingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: trainings
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

# --- Cognito resources
  NLPCognitoUserPool:
    Type: AWS::Cognito::UserPool

  NLPCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref NLPCognitoUserPool
      Domain: !Ref AWS::StackName

  NLPCognitoUserPoolClient:
    DependsOn: CloudFrontDistribution
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Join ["", ["https://", !GetAtt CloudFrontDistribution.DomainName, "/index.html"] ]
      ClientName: nlpjswebauth
      GenerateSecret: false
      LogoutURLs:
        - !Join ["", ["https://", !GetAtt CloudFrontDistribution.DomainName, "/logout.html"] ]
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref NLPCognitoUserPool

# --- Outputs section

Outputs:
  TrainingBucket:
    Description: S3 bucket that hosts the training application
    Value: !Ref TrainingAppBucket

  TrainingAppUrl:
    Description: Public Cloudfront URL to access the training application
    Value: !GetAtt CloudFrontDistribution.DomainName

  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join ["", ["https://", Ref: ApiGatewayRestApi, ".execute-api.", Ref: "AWS::Region", ".amazonaws.com/dev"]]

  LoginUrl:
    Description: Public login page for NLP.js training application
    Value: !GetAtt NLPCognitoUserPoolDomain.Domain
